# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tileengine
else:
    import _tileengine

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def import_cairo():
    return _tileengine.import_cairo()
TILEENGINE_VERSION = _tileengine.TILEENGINE_VERSION
TILE_FORMAT_BYTE_SIGNED = _tileengine.TILE_FORMAT_BYTE_SIGNED
TILE_FORMAT_BYTE_UNSIGNED = _tileengine.TILE_FORMAT_BYTE_UNSIGNED
TILE_FORMAT_SHORT_SIGNED = _tileengine.TILE_FORMAT_SHORT_SIGNED
TILE_FORMAT_SHORT_UNSIGNED = _tileengine.TILE_FORMAT_SHORT_UNSIGNED
TILE_FORMAT_LONG_SIGNED = _tileengine.TILE_FORMAT_LONG_SIGNED
TILE_FORMAT_LONG_UNSIGNED = _tileengine.TILE_FORMAT_LONG_UNSIGNED
TILE_FORMAT_FLOAT = _tileengine.TILE_FORMAT_FLOAT
TILE_FORMAT_DOUBLE = _tileengine.TILE_FORMAT_DOUBLE
TILE_FORMAT_COUNT = _tileengine.TILE_FORMAT_COUNT
TILE_CODE_RAW_BINARY_16 = _tileengine.TILE_CODE_RAW_BINARY_16
TILE_CODE_COMPRESSED_TEXT = _tileengine.TILE_CODE_COMPRESSED_TEXT
TILE_CODE_COMPRESSED_BINARY_16 = _tileengine.TILE_CODE_COMPRESSED_BINARY_16
TILE_CODE_COUNT = _tileengine.TILE_CODE_COUNT
TILE_CODE_COMPRESSED_TEXT_SKIP_0 = _tileengine.TILE_CODE_COMPRESSED_TEXT_SKIP_0
TILE_CODE_COMPRESSED_TEXT_SKIP_1 = _tileengine.TILE_CODE_COMPRESSED_TEXT_SKIP_1
TILE_CODE_COMPRESSED_TEXT_SKIP_2 = _tileengine.TILE_CODE_COMPRESSED_TEXT_SKIP_2
TILE_CODE_COMPRESSED_TEXT_SKIP_3 = _tileengine.TILE_CODE_COMPRESSED_TEXT_SKIP_3
TILE_CODE_COMPRESSED_BINARY_16_SKIP_0 = _tileengine.TILE_CODE_COMPRESSED_BINARY_16_SKIP_0
TILE_CODE_COMPRESSED_BINARY_16_SKIP_1 = _tileengine.TILE_CODE_COMPRESSED_BINARY_16_SKIP_1
TILE_CODE_COMPRESSED_BINARY_16_SKIP_2 = _tileengine.TILE_CODE_COMPRESSED_BINARY_16_SKIP_2
TILE_CODE_COMPRESSED_BINARY_16_HIGH_MAX = _tileengine.TILE_CODE_COMPRESSED_BINARY_16_HIGH_MAX
class TileEngine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    width = property(_tileengine.TileEngine_width_get, _tileengine.TileEngine_width_set)
    height = property(_tileengine.TileEngine_height_get, _tileengine.TileEngine_height_set)
    bufData = property(_tileengine.TileEngine_bufData_get, _tileengine.TileEngine_bufData_set)
    colBytes = property(_tileengine.TileEngine_colBytes_get, _tileengine.TileEngine_colBytes_set)
    rowBytes = property(_tileengine.TileEngine_rowBytes_get, _tileengine.TileEngine_rowBytes_set)
    tileFormat = property(_tileengine.TileEngine_tileFormat_get, _tileengine.TileEngine_tileFormat_set)
    floatOffset = property(_tileengine.TileEngine_floatOffset_get, _tileengine.TileEngine_floatOffset_set)
    floatScale = property(_tileengine.TileEngine_floatScale_get, _tileengine.TileEngine_floatScale_set)
    tileShift = property(_tileengine.TileEngine_tileShift_get, _tileengine.TileEngine_tileShift_set)
    tileMask = property(_tileengine.TileEngine_tileMask_get, _tileengine.TileEngine_tileMask_set)

    def __init__(self):
        _tileengine.TileEngine_swiginit(self, _tileengine.new_TileEngine())
    __swig_destroy__ = _tileengine.delete_TileEngine

    def setBuffer(self, buf):
        return _tileengine.TileEngine_setBuffer(self, buf)

    def getValue(self, col, row, tileFunction=None, tileMapData=None, tileMapCount=0):
        return _tileengine.TileEngine_getValue(self, col, row, tileFunction, tileMapData, tileMapCount)

    def renderTiles(self, ctx, tilesSurf, tilesWidth, tilesHeight, tileFunction, tileMap, tileSize, renderCol, renderRow, renderCols, renderRows, alpha):
        return _tileengine.TileEngine_renderTiles(self, ctx, tilesSurf, tilesWidth, tilesHeight, tileFunction, tileMap, tileSize, renderCol, renderRow, renderCols, renderRows, alpha)

    def renderTilesLazy(self, ctx, tileFunction, tileMap, tileSize, renderCol, renderRow, renderCols, renderRows, alpha, tileGenerator, tileCache, tileCacheSurfaces, tileState):
        return _tileengine.TileEngine_renderTilesLazy(self, ctx, tileFunction, tileMap, tileSize, renderCol, renderRow, renderCols, renderRows, alpha, tileGenerator, tileCache, tileCacheSurfaces, tileState)

    def renderPixels(self, destSurf, cmapSurf, tileFunction, tileMap, renderCol, renderRow, renderCols, renderRows):
        return _tileengine.TileEngine_renderPixels(self, destSurf, cmapSurf, tileFunction, tileMap, renderCol, renderRow, renderCols, renderRows)

    def getTileData(self, tileFunction, tileMap, col, row, cols, rows, code, tileViewCache):
        return _tileengine.TileEngine_getTileData(self, tileFunction, tileMap, col, row, cols, rows, code, tileViewCache)

# Register TileEngine in _tileengine:
_tileengine.TileEngine_swigregister(TileEngine)

